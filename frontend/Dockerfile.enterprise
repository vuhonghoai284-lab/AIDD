# AI文档测试系统 - 企业级前端Dockerfile
# 多阶段构建，优化性能和安全性

# 阶段1: 构建环境
FROM node:22-alpine AS builder

# 接收构建参数
ARG BUILDTIME
ARG VERSION
ARG GIT_COMMIT
ARG GIT_BRANCH
ARG VITE_API_BASE_URL
ARG VITE_APP_TITLE="AI文档测试系统"
ARG VITE_APP_VERSION

# 设置构建环境变量
ENV NODE_ENV=production
ENV VITE_API_BASE_URL=${VITE_API_BASE_URL}
ENV VITE_APP_TITLE=${VITE_APP_TITLE}
ENV VITE_APP_VERSION=${VITE_APP_VERSION:-${VERSION}}

# 设置工作目录
WORKDIR /app

# 安装系统依赖
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# 复制package文件并安装依赖
COPY package*.json ./
RUN npm ci --only=production --silent \
    && npm cache clean --force

# 复制源代码
COPY . .

# 构建应用
RUN npm run build \
    && ls -la dist/

# 阶段2: 生产环境 - Nginx服务器
FROM nginx:alpine AS production

# 接收构建参数
ARG BUILDTIME
ARG VERSION  
ARG GIT_COMMIT
ARG GIT_BRANCH

# 设置标签
LABEL maintainer="AI文档测试系统团队"
LABEL version="${VERSION}"
LABEL build-date="${BUILDTIME}"
LABEL git-commit="${GIT_COMMIT}"
LABEL git-branch="${GIT_BRANCH}"
LABEL description="AI文档测试系统前端服务"

# 安装运行时工具
RUN apk add --no-cache \
    curl \
    ca-certificates \
    && rm -rf /var/cache/apk/*

# 复制自定义Nginx配置
COPY nginx.enterprise.conf /etc/nginx/conf.d/default.conf

# 从构建阶段复制构建产物
COPY --from=builder /app/dist /usr/share/nginx/html

# 创建nginx用户和必要目录
RUN addgroup -g 1001 -S appgroup \
    && adduser -S -u 1001 -G appgroup appuser \
    && mkdir -p /var/log/nginx /var/cache/nginx/client_temp \
    && chown -R appuser:appgroup /var/log/nginx /var/cache/nginx /usr/share/nginx/html \
    && chmod -R 755 /usr/share/nginx/html

# 创建启动脚本
RUN cat > /docker-entrypoint.sh << 'EOF'
#!/bin/sh
set -e

# 显示构建信息
echo "AI文档测试系统前端服务"
echo "版本: ${VERSION:-unknown}"
echo "Git提交: ${GIT_COMMIT:-unknown}"  
echo "构建时间: ${BUILDTIME:-unknown}"

# 启动nginx
echo "启动Nginx服务器..."
exec nginx -g 'daemon off;'
EOF

RUN chmod +x /docker-entrypoint.sh

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# 暴露端口
EXPOSE 80

# 启动命令
ENTRYPOINT ["/docker-entrypoint.sh"]