version: '3.8'

services:
  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    # 或使用预构建镜像
    # image: ghcr.io/wantiantian/ai_docs2/backend:latest
    container_name: ai-docs-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - CONFIG_FILE=/app/config/config.yaml
      - ENVIRONMENT=production
      - DATABASE_URL=sqlite:///app/data/app.db
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
    env_file:
      - .env
    volumes:
      # 外部配置文件支持
      - ./backend/config.yaml:/app/config/config.yaml:ro
      - ./.env:/app/.env:ro
      # 数据持久化
      - backend_data:/app/data
      # 日志目录
      - backend_logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - ai-docs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # 或使用预构建镜像
    # image: ghcr.io/wantiantian/ai_docs2/frontend:latest
    container_name: ai-docs-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # 挂载自定义nginx配置（可选）
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    networks:
      - ai-docs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: ai-docs-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-ai_docs_db}
      - POSTGRES_USER=${POSTGRES_USER:-ai_docs}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-your_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ai-docs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ai_docs} -d ${POSTGRES_DB:-ai_docs_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis服务
  redis:
    image: redis:7-alpine
    container_name: ai-docs-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - ai-docs-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  backend_data:
    driver: local
  backend_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai-docs-network:
    driver: bridge