# 生产环境 Docker Compose 配置
version: '3.8'

services:
  backend:
    # 使用预构建镜像
    image: ghcr.io/wantiantian/ai_docs2/backend:latest
    container_name: ai-docs-backend-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - CONFIG_FILE=/app/config/config.yaml
      - ENVIRONMENT=production
      - DATABASE_URL=sqlite:///app/data/app.db
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
    env_file:
      - .env.prod
    volumes:
      # 生产环境配置文件
      - ./config/config.prod.yaml:/app/config/config.yaml:ro
      - ./.env.prod:/app/.env:ro
      # 数据持久化
      - /var/lib/ai-docs/data:/app/data
      - /var/log/ai-docs:/app/logs
    depends_on:
      - redis
    networks:
      - ai-docs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    # 使用预构建镜像
    image: ghcr.io/wantiantian/ai_docs2/frontend:latest
    container_name: ai-docs-frontend-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # 生产环境nginx配置
      - ./config/nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
      # SSL证书（如果使用HTTPS）
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - ai-docs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: ai-docs-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - /var/lib/ai-docs/redis:/data
    networks:
      - ai-docs-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # 可选：监控服务
  watchtower:
    image: containrrr/watchtower
    container_name: ai-docs-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
    command: ai-docs-backend-prod ai-docs-frontend-prod

networks:
  ai-docs-network:
    driver: bridge