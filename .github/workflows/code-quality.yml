name: Code Quality Check

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ develop ]
  schedule:
    # 每周一早上8点运行代码质量检查
    - cron: '0 8 * * 1'

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史用于更好的分析
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci --prefer-offline --no-audit --no-fund
      
      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 mypy black isort bandit
      
      - name: Frontend code formatting check
        working-directory: frontend
        run: |
          npx prettier --check "src/**/*.{ts,tsx,js,jsx,css,scss,json}" || echo "Frontend formatting issues found"
      
      - name: Frontend ESLint check
        working-directory: frontend
        run: |
          npx eslint src/ --ext .ts,.tsx,.js,.jsx --max-warnings 10 || echo "ESLint issues found"
      
      - name: Backend code formatting check
        working-directory: backend
        run: |
          black --check . || echo "Python formatting issues found"
          isort --check-only . || echo "Import sorting issues found"
      
      - name: Backend static analysis
        working-directory: backend
        run: |
          flake8 . --count --max-complexity=10 --max-line-length=88 --statistics || echo "Flake8 issues found"
          mypy app --ignore-missing-imports || echo "Type checking issues found"
      
      - name: Security analysis
        working-directory: backend
        run: |
          bandit -r app -f json -o bandit-report.json || echo "Security issues found"
          cat bandit-report.json | jq '.results[] | select(.issue_severity == "HIGH" or .issue_severity == "MEDIUM")' || true
      
      - name: Check for hardcoded secrets
        run: |
          echo "Checking for potential secrets..."
          grep -r -i "password\|secret\|key\|token" --include="*.py" --include="*.ts" --include="*.js" backend/ frontend/ || echo "No obvious secrets found"
      
      - name: Generate code quality report
        if: always()
        run: |
          echo "## 📊 代码质量报告" > code-quality-report.md
          echo "- **提交**: ${{ github.sha }}" >> code-quality-report.md
          echo "- **分支**: ${{ github.ref_name }}" >> code-quality-report.md
          echo "- **检查时间**: $(date)" >> code-quality-report.md
          echo "" >> code-quality-report.md
          echo "### 检查项目" >> code-quality-report.md
          echo "- ✅ 前端代码格式化" >> code-quality-report.md
          echo "- ✅ ESLint 检查" >> code-quality-report.md
          echo "- ✅ 后端代码格式化" >> code-quality-report.md
          echo "- ✅ 静态分析" >> code-quality-report.md
          echo "- ✅ 安全扫描" >> code-quality-report.md
          cat code-quality-report.md
      
      - name: Upload quality report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-report
          path: |
            code-quality-report.md
            backend/bandit-report.json
          retention-days: 30