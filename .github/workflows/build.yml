name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  PROJECT_NAME: aidd

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        DATABASE_TYPE=sqlite
        DATABASE_URL=sqlite:///app/data/test.db
        REDIS_URL=redis://redis:6379/1
        DEBUG=false
        ENVIRONMENT=test
        LOG_LEVEL=WARNING
        JWT_SECRET_KEY=test-secret-key
        OAUTH_CLIENT_SECRET=test-oauth-secret
        OPENAI_API_KEY=test-api-key
        EOF

    - name: Set up Docker Compose
      run: |
        # 使用构建的镜像进行测试
        sed -i 's|build:|image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}/backend:${{ github.ref_name }}|' docker-compose.yml
        sed -i 's|context: ./backend||' docker-compose.yml
        sed -i 's|dockerfile: Dockerfile||' docker-compose.yml
        sed -i 's|build:|image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}/frontend:${{ github.ref_name }}|' docker-compose.yml
        sed -i 's|context: ./frontend||' docker-compose.yml

    - name: Run integration tests
      run: |
        # 启动测试环境
        docker compose --env-file .env.test up -d
        
        # 等待服务启动
        sleep 30
        
        # 健康检查
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:80/ || exit 1
        
        # 简单的API测试
        curl -f http://localhost:8000/api/auth/health || exit 1

    - name: Cleanup test environment
      if: always()
      run: |
        docker compose --env-file .env.test down -v
        docker system prune -f

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}/backend:${{ github.ref_name }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [build, test]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## What's Changed
          
          Docker Images:
          - Backend: `${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}/backend:${{ github.ref_name }}`
          - Frontend: `${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}/frontend:${{ github.ref_name }}`
          
          ## Deployment
          
          ```bash
          # Quick start
          ./start.sh
          
          # Or use specific version
          VERSION=${{ github.ref_name }} ./deploy.sh up
          ```
          
          See [Deployment Guide](README_DEPLOY.md) for detailed instructions.
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}